xelatex("mcmthesis-demo.tex")
pdflatex("mcmthesis-demo.tex")
library(tinytex)
xelatex("mcmthesis-demo.tex")
xelatex("mcmthesis-demo.tex")
xelatex("mcmthesis-demo.tex")
xelatex("mcmthesis-demo.tex")
options(encoding = "UTF-8")
library(tinytex)
options(encoding = "UTF-8")
xelatex("mcmthesis-demo.tex")
library(tinytex)
library(tinytex)
xelatex("mcmthesis-demo.tex")
?tryCatch
tryCatch(1, finally = print("Hello"))
e <- simpleError("test error")
e
?tidyeval
?eval
?{{}}
?enque
library(tidyverse)
?enque
?eque
?enque
?enquo
?!!
l
mtcars %>%
summarise(n = n(), mean = .$mpg)
library(tinytex)
pdflatex("MCM-ICM_Summary.tex")
library(mlr3verse)
task = tsk("iris")
learner = lrn("classif.rpart")
learner$train(task, row_ids = 1:120)
learner$model
predictions = learner$predict(task, row_ids = 121:150)
predictions
predictions$score(msr("classif.acc"))
pdflatex("MCM-ICM_Summary.tex")
library(tinytex)
pdflatex("MCM-ICM_Summary.tex")
library(tinytex)
xelatex("mcmthesis-demo.tex")
library(tidyverse)
iris= as_tibble(iris)
iris
iris %>% mutate(across(1:4, ~ round(.x, 2)))
iris %>% mutate(across(1:4, ~ round(.x, 0)))
?format
iris %>% mutate(across(1:4, ~ format(.x, digits = 2)))
iris %>% mutate(across(1:4, ~ format(.x, digits = 3)))
iris %>% mutate(across(1:4, ~ format(.x, digits = 4)))
iris %>% mutate(across(1:4, ~ format(.x, nsmall = 2)))
mtcars
mtcars[1:3, "mpg"]
library(tidyverse)
df = tibble(班级 = rep("A","B","C",each=3), 身高=c(180,187,178,183,172,167,180,175,190,176))
df = tibble(班级 = rep(c("A","B","C"),each=3), 身高=c(180,187,178,183,172,167,180,175,190,176))
df = tibble(班级 = c("A","A","A","B","B","B","B","C","C","C"),each=3), 身高=c(180,187,178,183,172,167,180,175,190,176))
df = tibble(班级 = c("A","A","A","B","B","B","B","C","C","C"), 身高=c(180,187,178,183,172,167,180,175,190,176))
df
class = df[df$身高==180, "班级"]
class
class = df[df$身高==180, "班级"] %>% unique()
class
df %>% filter(班级 %in% class)
df %>% filter(班级 %in% class$班级)
df
df= as.data.frame(df)
df
class = df[df$身高==180, "班级"] %>% unique()
class
filter(df, 班级 %in% class)
subset(df, 班级 %in% class)
class = df[df$身高==180, "班级"] %>% unique()
subset(df, 班级 %in% class)
class = df[df$身高==180, "班级"] %>% unique()
class
subset(df, 班级 %in% class)
df=as_tibble(df)
df
df %>%
filter(身高 == 180)
library(tinytex)
xelatex("mcmthesis-demo.tex")
pdflatex("mcmthesis-demo.tex")
library(tinytex)
pdflatex("mcmthesis-demo.tex")
library(tinytex)
pdflatex("MCM-ICM_Summary.tex")
pdflatex("MCM-ICM_Summary.tex")
pdflatex("mcmthesis-demo.tex")
library(tinytex)
pdflatex("mcmthesis-demo.tex")
pdflatex("mcmthesis-demo.tex")
pdflatex("mcmthesis-demo.tex")
pdflatex("mcmthesis-demo.tex")
library(mlr3verse)
?msr
library(tidyverse)
l1 = list(list(neighber = 1:5, b = 2:4), list(neighber = 4:6, c = 3:10))
l1
map(l1, "neighber")
map(l1, "neighber") %>% map_dbl(3)
?scale_y_time
last_month <- Sys.Date() - 0:29
df <- data.frame(
date = last_month,
price = runif(30)
)
base <- ggplot(df, aes(date, price)) +
geom_line()
base
base + scale_x_date(trans = "reverse")
base + scale_x_reverse()
set.seed(1)
df = tibble(
a = c(1,4,3,7),
b = a + rnorm(4)
)
df
df %>%
pivot_longer(1:2, names_to = "var", values_to = "val")
df %>%
pivot_longer(1:2, names_to = "var", values_to = "val") %>%
ggplot(aes(y = val, color = var)) +
geom_point()
df %>%
pivot_longer(1:2, names_to = "var", values_to = "val") %>%
ggplot(aes(x = 1:4, y = val, color = var)) +
geom_point()
df %>%
pivot_longer(1:2, names_to = "var", values_to = "val") %>%
mutate(x = 1:n()) %>%
ggplot(aes(x = x, y = val, color = var)) +
geom_point()
set.seed(1)
df = tibble(
x = 1:4,
a = c(1,4,3,7),
b = a + rnorm(4)
)
df %>%
pivot_longer(-x, names_to = "var", values_to = "val") %>%
mutate(x = 1:n()) %>%
ggplot(aes(x = x, y = val, color = var)) +
geom_point()
df %>%
pivot_longer(-x, names_to = "var", values_to = "val") %>%
ggplot(aes(x = x, y = val, color = var)) +
geom_point()
?geom_ribbon
df %>%
pivot_longer(-x, names_to = "var", values_to = "val")
df %>%
pivot_longer(-x, names_to = "var", values_to = "val") %>%
ggplot(aes(x = x, y = val, color = var)) +
geom_point() +
geom_ribbon(ymin = min(val), ymax = max(val))
df %>%
pivot_longer(-x, names_to = "var", values_to = "val") %>%
ggplot(aes(x = x, y = val, color = var)) +
geom_point() +
geom_ribbon(aes(ymin = min(val), ymax = max(val)))
df %>%
pivot_longer(-x, names_to = "var", values_to = "val") %>%
ggplot(aes(x = x, y = val, color = var)) +
geom_point() +
geom_ribbon(aes(ymin = val, ymax = val))
df
df %>%
ggplot(aes(x = x)) +
geom_ribbon(aes(ymin = a, ymax = b))
df %>%
ggplot(aes(x = x)) +
geom_errorbar(aes(ymin = a, ymax = b))
df %>%
pivot_longer(-x, names_to = "var", values_to = "val")
df %>%
pivot_longer(-x, names_to = "var", values_to = "val") %>%
ggplot(aes(x = x, y = val)) +
geom_line()
df %>%
pivot_longer(-x, names_to = "var", values_to = "val") %>%
ggplot(aes(x = x, y = val, color = var)) +
geom_line()
df %>%
pivot_longer(-x, names_to = "var", values_to = "val") %>%
ggplot(aes(x = x, y = val, color = var)) +
geom_vline()
?kmeans
36170/1228
36170/1338
library(tidyverse)
install.packages("D:/gurobi950/win64/R/gurobi_9.5-0.zip", repos = NULL, type = "win.binary")
install.packages("slam")
library(gurobi)
library(gurobi)
model = list()
model$A = matrix(c(1,1,0,0,1,1), nrow = 2, byrow = TRUE)
model$obj = c(1,2,3)
model$modelsense = "max"
model$rhs = c(1,1)
model$sense = c("<=", "<=")
result = gurobi(model)
result$objval
?c_across
library(tidyverse)
?c_across
library(mlr3verse)
library(mlr3proba)
library(survival)
task = tsk("rats")
learner = lrn("surv.coxh")
learner = lrn("surv.coxph")
measure = msr("surv.hung_auc")
install.packages("survAUC")
measure = msr("surv.hung_auc")
pred = learner$train(task)$predict(task)
pred$score(measure)
measure = msr("surv.cindex")
pred$score(measure)
measure = msr("surv.hung_auc", times = 60)
pred$score(measure, task)
task$data()
pred$score(measure, task, row_ids = 1:270)
pred = learner$train(task, row_ids = 1:270)$predict(task, row_ids = 271:300)
pred$score(measure, task)
pred$score(measure, task, train_set = 1:270)
pred = learner$train(task)$predict(task)
pred$score(measure, task, train_set = 1:270)
?survAUC::AUC.hc()
learner = lrn("surv.coxph")
measure = msr("surv.hung_auc", times = 60)
pred = learner$train(task, row_ids = 1:270)$predict(task, row_ids = 271:300)
pred$score(measure, task, train_set = 1:270)
library(tidyverse)
?mean
df = tibble(
x = c(2,NA,5,7),
y = LETTERS[1:4],
z = c(5,6,NA,NA)
)
df
df %>%
mutate(across(where(is.numeric), ~ .x[is.na(.x)] = mean(.x, na.rm = TRUE)))
?replace_na
starwars %>%
mutate(across(where(is.numeric)), ~ replace_na(.x, mean(.x, na.rm = TRUE)))
starwars %>%
mutate(across(where(is.numeric), ~ replace_na(.x, mean(.x, na.rm = TRUE))))
library(tinytex)
pdflatex("mcmthesis.tex")
pdflatex("mcmthesis-demo.tex")
library(tinytex)
pdflatex(mcmthesis-demo.tex)
pdflatex("mcmthesis-demo.tex")
pdflatex("mcmthesis-demo.tex")
pdflatex("mcmthesis-demo.tex")
pdflatex("mcmthesis-demo.tex")
pdflatex("mcmthesis-demo.tex")
pdflatex("mcmthesis-demo.tex")
pdflatex("mcmthesis-demo.tex")
pdflatex("mcmthesis-demo.tex")
library(tinytex)
pdflatex("mcmthesis-demo.tex")
library(timetk)
holidays <- tk_make_holiday_sequence(
start_date = "2013-01-01",
end_date   = "2013-12-31",
calendar   = "NYSE")
holidays
idx <- tk_make_weekday_sequence("2012",
remove_weekends = TRUE,
remove_holidays = TRUE, calendar = "NYSE")
idx
tk_get_timeseries_summary(idx)
idx <- tk_make_weekday_sequence("2012",
remove_weekends = TRUE,
remove_holidays = TRUE, calendar = "NYSE")
tk_get_timeseries_summary(idx)
tk_make_holiday_sequence("2012", calendar = "NYSE")
?tk_make_weekday_sequence
?slidify
FB <- FANG %>% filter(symbol == "FB")
library(tidyverse)
library(tidyquant)
FB <- FANG %>% filter(symbol == "FB")
mean_roll_5 <- slidify(mean, .period = 5, .align = "right")
FB %>%
mutate(rolling_mean_5 = mean_roll_5(adjusted))
as_mapper(~ .x ^ 2 + 1)
?roll_toslide
?roll_tos_lide
?roll_to_slide
?pslide
remove.packages("timetk")
install.packages("timetk")
install.packages("timetk")
idx <- tk_make_weekday_sequence("2012",
remove_weekends = TRUE,
remove_holidays = TRUE, calendar = "NYSE")
tk_get_timeseries_summary(idx)
library(timetk)
idx <- tk_make_weekday_sequence("2012",
remove_weekends = TRUE,
remove_holidays = TRUE, calendar = "NYSE")
tk_get_timeseries_summary(idx)
?tk_make_weekday_sequence
holidays <- tk_make_holiday_sequence(
start_date = "2016",
end_date   = "2017",
calendar   = "NYSE")
weekends <- tk_make_weekend_sequence(
start_date = "2016",
end_date   = "2017")
holidays
weekends
weekends <- tk_make_weekend_sequence(
start_date = "2016-01-01",
end_date   = "2017-12-31")
weekends
weekends <- tk_make_weekdays_sequence(
start_date = "2016-01-01",
end_date   = "2017-12-31")
weekends <- tk_make_weekday_sequence(
start_date = "2016-01-01",
end_date   = "2017-12-31")
weekends
library(tinytex)
pdflatex("mcmthesis-demo.tex")
pdflatex("mcmthesis-demo.tex")
pdflatex("mcmthesis-demo.tex")
library(tinytex)
pdflatex("mcmthesis-demo.tex")
pdflatex("mcmthesis-demo.tex")
pdflatex("mcmthesis-demo.tex")
pdflatex("mcmthesis-demo.tex")
pdflatex("mcmthesis-demo.tex")
library(lubridate)
begin = ymd_hm("2019-08-10 14:00")
end = ymd_hm("2020-03-05 18:15")
interval(begin, end)
begin %--% end
library(tinytex)
xelatex("mcmthesis-demo.tex")
library(tinytex)
pdflatex("mcmthesis-demo.tex")
